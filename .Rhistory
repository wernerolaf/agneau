library(OpenML)
library(DALEX)
library(OpenML)
install.packages("OpenML")
library(OpenML)
library("OpenML", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:OpenML", unload=TRUE)
remove.packages("OpenML", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("OpenML")
remove.packages("curl", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("curl")
install.packages("curl")
install.packages("OpenML")
library(readr)
data_train <- read_csv("Desktop/data_train.csv")
View(data_train)
data<-data_train[1:100,]
library(dplyr)
View(data)
(3750901.5068+3770901.5068)/2
(-19268905.6133-19208905.6133)/2
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906))>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906))))
)
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906))>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906)))))
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906))>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906))))) ->tmp
View(tmp)
data$y_exit<- -19238906
data$x_exit<- 3760902
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906))>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906))))) ->tmp
View(tmp)
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906)))>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906)))) ->tmp
View(tmp)
data<-data_train[1:100,]
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906)))>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906)))) ->tmp
View(tmp)
data$y_exit<- -19238906
data$x_exit<- 3760902
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906)))>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906)))) ->tmp
View(tmp)
?dist()
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906)))) ->tmp
View(tmp)
data<-data_train[1:100,]
data %>% mutate(is_closer=dist(rbind(c(x_entry,y_entry),c(3760902,-19238906)))) ->tmp
View(tmp)
View(data)
mean(is.numeric(data_train$vmean))
is.numeric(data_train$vmean)
data_train$vmean
is.na(data_train$vmean)
mean(is.na(data_train$vmean) | data$vmean=="NaN")
data$vmean=="NaN"
mean(data$vmean=="NaN")
mean(data$vmean=="NaN",na.rm = TRUE)
mean(is.na(data_train$vmean))
mean(is.na(data_train$vmean))*mean(data$vmean=="NaN",na.rm = TRUE)
mean(data$vmean=="NaN",na.rm = TRUE)/mean(is.na(data_train$vmean))
#>dist(rbind(c(x_exit,y_exit),c(3760902,-19238906)))
mean(data$vmean=="NaN",na.rm = TRUE)
mean(is.na(data_train$vmean))
(1-mean(is.na(data_train$vmean)))*mean(data$vmean=="NaN",na.rm = TRUE)
(1-mean(is.na(data_train$vmax)))*mean(data$vmax=="NaN",na.rm = TRUE)
(1-mean(is.na(data_train$vmin)))*mean(data$vmin=="NaN",na.rm = TRUE)
setwd("~/Desktop/City_Traffic_Prediction")
library(mlr)
library(dplyr)
library(readr)
oneliners<-read_csv("pre_train/pre_df_oneliners.csv")
df <- read_csv("pre_train/pre_df.csv")
oneliners_t<-read_csv("pre_test/pre_df_oneliners_t.csv")
df_t<-read_csv("pre_test/pre_df_t.csv")
require(DataExplorer)
source("localization.R")
pingi<-function(df){
if(dim(df)[1]==1){
return(df)
}
for( i in 1:(dim(df)[1]-1)){
if(pull(df[i,"time_entry"])==pull(df[i,"time_exit"])){
df[i,"time_exit"]=df[i+1,"time_entry"]
df[i,"x_exit"]=df[i+1,"x_entry"]
df[i,"time_exit"]=df[i+1,"time_entry"]
}
}
return(df)
}
### is.in.city
preprocess <- function(df){
df <- df %>% dplyr::select(-X1)
df$time_entry <- as.numeric(df$time_entry)
df$time_exit <- as.numeric(df$time_exit)
df %>% group_by(hash) %>% do(pingi(.)) %>% ungroup() -> df
df$starts_in_center <- are_in_center(df$x_entry, df$y_entry)
df$ends_in_center <- are_in_center(df$x_exit, df$y_exit)
df$x_entry<-df$x_entry-(3750901.5068+3770901.5068)/2
df$x_exit<-df$x_exit-(3750901.5068+3770901.5068)/2
df$y_entry<-df$y_entry+(19268905.6133+19208905.6133)/2
df$y_exit<-df$y_exit+(19268905.6133+19208905.6133)/2
temp<-df$vmax
temp[temp=="NaN"]<-NA
temp[is.na(temp)]<-0
temp[temp<0]<-0
temp[temp>0 & temp<4]<-1
temp[temp>=4 & temp<=40]<-2
temp[temp>40]<-3
temp<-factor(temp)
df$maybe_car<-temp
df %>% group_by(hash) %>% filter(n()==1) -> oneliners #tylko jeden rekord!
df %>% group_by(hash) %>% filter(n()>1) -> df
#pozniej mozemy brac wiecej wierszy pod uwage
df_last <- df %>% group_by(hash) %>% dplyr::select(-x_exit,-y_exit) %>% mutate(in_center_fraction=mean(starts_in_center,na.rm = TRUE)) %>% filter(row_number() == n())
df_first <- df %>% group_by(hash) %>% dplyr::select(-trajectory_id)  %>% filter(row_number() == 1)
#bez sensu warningi
distance_1 <- apply(df_first,1,distance_travel)
distance_2 <- apply(df_first,1,distance_over)
distance_3 <- apply(df_first,1,distance_to_center)
distance_1_manh <- apply(df_first,1,distance_travel_manh)
distance_2_manh <- apply(df_first,1,distance_over_manh)
distance_3_manh <- apply(df_first,1,distance_to_center_manh)
df_first$closer_to_center<-distance_1
df_first$distance_over<-distance_2
df_first$how_close<-distance_3
df_first<- df_first %>% mutate(to_center=closer_to_center>0)
df_first<- df_first %>% mutate(speed=distance_over/(time_exit-time_entry))
df_first$closer_to_center_manh<-distance_1_manh
df_first$distance_over_manh<-distance_2_manh
df_first$how_close_manh<-distance_3_manh
df_first<- df_first %>% mutate(to_center_manh=closer_to_center_manh>0)
df_first<- df_first %>% mutate(speed_manh=distance_over_manh/(time_exit-time_entry))
df_prelast <- df %>% group_by(hash) %>% dplyr::select(-trajectory_id)  %>% filter(row_number() == n()-1)
#bez sensu warningi
distance_1 <- apply(df_prelast,1,distance_travel)
distance_2 <- apply(df_prelast,1,distance_over)
distance_3 <- apply(df_prelast,1,distance_to_center)
distance_1_manh <- apply(df_prelast,1,distance_travel_manh)
distance_2_manh <- apply(df_prelast,1,distance_over_manh)
distance_3_manh <- apply(df_prelast,1,distance_to_center_manh)
df_prelast$closer_to_center<-distance_1
df_prelast$distance_over<-distance_2
df_prelast$how_close<-distance_3
df_prelast<- df_prelast %>% mutate(to_center=closer_to_center>0)
df_prelast<- df_prelast %>% mutate(speed=distance_over/(time_exit-time_entry))
df_prelast$closer_to_center_manh<-distance_1_manh
df_prelast$distance_over_manh<-distance_2_manh
df_prelast$how_close_manh<-distance_3_manh
df_prelast<- df_prelast %>% mutate(to_center_manh=closer_to_center_manh>0)
df_prelast<- df_prelast %>% mutate(speed_manh=distance_over_manh/(time_exit-time_entry))
df <- left_join(df_last, df_first, by = "hash",suffix = c("_last", "_first"))
df<-left_join(df,df_prelast,by="hash",suffix=c("","_prelast"))
df<-ungroup(df)
df$potential_distance_over_manh<-df$speed_manh_prelast*(df$time_exit_last-df$time_entry_last)
df$potential_distance_over<-df$speed_prelast*(df$time_exit_last-df$time_entry_last)
df <- df %>% dplyr::select(-starts_with("vm"))
oneliners <- oneliners %>% dplyr::select(-starts_with("vm"))
oneliners<-oneliners %>%  dplyr::select(-x_exit,-y_exit)
oneliners<-ungroup(oneliners)
return(list(df,oneliners))
}
setwd("~/Desktop")
read_csv("data_test.csv", col_types = cols(
X1 = col_double(),
hash = col_character(),
trajectory_id = col_character(),
time_entry = col_time(format = ""),
time_exit = col_time(format = ""),
vmax = col_double(),
vmin = col_double(),
vmean = col_double(),
x_entry = col_double(),
y_entry = col_double(),
x_exit = col_double(),
y_exit = col_double()
)) -> df_t
df_t <- preprocess(df_t)
oneliners_t<-df_t[[2]]
write_csv(oneliners_t,"pre_test/pre_df_oneliners_t.csv")
setwd("~/Desktop/City_Traffic_Prediction")
write_csv(oneliners_t,"pre_test/pre_df_oneliners_t.csv")
df_t<-df_t[[1]]
write_csv(df_t,"pre_test/pre_df_t.csv")
hashe<-df_t %>% dplyr::select(hash,trajectory_id)
df_t<-df_t %>% dplyr::select(-hash,-trajectory_id)
df<-df %>% dplyr::select(-hash,-trajectory_id)
#logiczne typy
df[sapply(df, is.logical)] <- lapply(df[sapply(df, is.logical)],as.factor)
df_t[sapply(df_t, is.logical)] <- lapply(df_t[sapply(df_t, is.logical)],as.factor)
task <- makeClassifTask(id = "task", data = df, target = "ends_in_center_last")
mozliwosci<-listLearners(check.packages = TRUE)
#mozesz inny model
learner <- makeLearner("classif.ranger", predict.type = "prob")
model <- train(learner, task)
rt <- predict(model,newdata = df_t)
#logiczne typy
oneliners[sapply(oneliners, is.logical)] <- lapply(oneliners[sapply(oneliners, is.logical)],as.factor)
oneliners_t[sapply(oneliners_t, is.logical)] <- lapply(oneliners_t[sapply(oneliners_t, is.logical)],as.factor)
hashe_small<-oneliners_t %>% dplyr::select(hash,trajectory_id)
oneliners_t<- oneliners_t %>% dplyr::select(-hash,-trajectory_id)
task_small <- makeClassifTask(id = "task", data = oneliners, target = "ends_in_center")
oneliners<- oneliners %>% dplyr::select(-hash,-trajectory_id)
task_small <- makeClassifTask(id = "task", data = oneliners, target = "ends_in_center")
learner_small <- makeLearner("classif.ranger", predict.type = "prob")
model_small<-train(learner_small, task_small)
rt2 <- predict(model_small,newdata = oneliners_t)
solution<-data_frame(id=hashe$trajectory_id,target=rt$data$response)
solution<-rbind(solution,data_frame(id=hashe_small$trajectory_id,target=rt2$data$response))
write_csv(solution,"solution.csv")
setwd("~/Desktop/agneau")
library(devtools)
library(devtool)
install.packages("devtools")
library(devtool)
library(devtools)
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("devtools")
library(devtools)
create_package()
create_package("agneau")
library(agneau)
agneau::
